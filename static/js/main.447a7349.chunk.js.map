{"version":3,"sources":["counter.module.css","counter.tsx","Counter2.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Counter","props","result","counter","errorValue","maxValue","startValue","className","s","number","error","content","buttonDiv","Button","variant","onClick","addTask","disabled","button","removeTask","style","marginLeft","Counter2","useState","setValue","setMaxValue","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","inputDiv","inputText","type","value","onChange","e","currentTarget","valueAsNumber","errorNumber","inputActive","input","set","setRemoveNumber","App","setCounter","setStartValue","setError","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.447a7349.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"counter_content__3juLg\",\"button\":\"counter_button__1njH1\",\"number\":\"counter_number__wcazE\",\"counter\":\"counter_counter__1QMcU\",\"buttonDiv\":\"counter_buttonDiv__2ltDA\",\"input\":\"counter_input__2wvru\",\"inputActive\":\"counter_inputActive__vMTCQ\",\"inputText\":\"counter_inputText__3ZJP4\",\"inputDiv\":\"counter_inputDiv__2Ew1f\"};","import React from 'react';\r\nimport s from './counter.module.css'\r\nimport {Button} from \"@material-ui/core\";\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nexport type CounterType = {\r\n    addTask: () => void\r\n    counter: number\r\n    removeTask: (counter: number) => void\r\n    error: boolean\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\nconst Counter = (props: CounterType) => {\r\n    const addNumber = () => {\r\n        props.addTask()\r\n    }\r\n    const removeCounterNumber = () => {\r\n        props.removeTask(props.counter)\r\n    }\r\n    const disableButton = () => {\r\n        return props.maxValue === props.counter || props.error\r\n    }\r\n    const result = props.counter\r\n    const errorValue =\r\n        props.maxValue === 0 && props.startValue === 0 ? <span className={s.number}>set value</span>\r\n            : props.maxValue <= props.startValue || props.error ? <span className={s.number}>error value</span>\r\n                : <div className={s.number}>\r\n                    <span className={props.counter === props.maxValue ? 'red' : 'black'}>{result}</span>\r\n                </div>\r\n\r\n    return (\r\n            <div>\r\n                <div className={s.content}>\r\n                    <div className={s.counter}>\r\n                        {errorValue}\r\n                        <div className={s.buttonDiv}>\r\n                            <Button variant={'contained'}\r\n                                    onClick={addNumber}\r\n                                    disabled={disableButton()}\r\n                                    className={s.button}\r\n                            >\r\n                            <AddIcon/>\r\n                            </Button>\r\n                            <Button variant={'contained'}\r\n                                    onClick={removeCounterNumber}\r\n                                    style={{marginLeft: '20px'}}\r\n                                    className={s.button}>\r\n                                <RotateLeftIcon/>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Counter;","import React, {FormEvent, useEffect, useState} from 'react';\r\nimport s from \"./counter.module.css\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nexport type CounterValueType = {\r\n    counter: number\r\n    set: (startValue: number) => void\r\n    setRemoveNumber: (removeNumber: number) => void\r\n    maxValue: (maxValue: number) => void\r\n    startValue: (starValue: number) => void\r\n    errorNumber: (error: boolean) => void\r\n    error: boolean\r\n\r\n}\r\nconst Counter2 = (props: CounterValueType) => {\r\n    const [startValue, setValue] = useState<number>(0)\r\n    const [maxValue, setMaxValue] = useState<number>(0)\r\n    const ChangeValue = (e: FormEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.valueAsNumber)\r\n        props.errorNumber(e.currentTarget.valueAsNumber < 0)\r\n    }\r\n    const changeMaxValue = (e: FormEvent<HTMLInputElement>) => {\r\n        setMaxValue(e.currentTarget.valueAsNumber)\r\n        props.errorNumber(e.currentTarget.valueAsNumber < 0)\r\n    }\r\n    const setResult = () => {\r\n        props.set(startValue)\r\n        props.setRemoveNumber(startValue)\r\n        props.maxValue(maxValue)\r\n        props.errorNumber(maxValue === startValue || maxValue < startValue)\r\n\r\n    }\r\n    useEffect(() => {\r\n        let valueAsString = localStorage.getItem('counterValue')\r\n        if (valueAsString) {\r\n            let newValue = JSON.parse(valueAsString)\r\n            setValue(newValue)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('counterValue', JSON.stringify(startValue))\r\n    }, [startValue])\r\n    const disableButton = () => {\r\n        return props.error\r\n    }\r\n    return (\r\n            <div className={s.content}>\r\n                <div className={s.counter}>\r\n                    <div className={s.inputDiv}>\r\n                        <div className={s.inputText}>\r\n                            <span>max value:</span>\r\n                            <input type={\"number\"} value={maxValue} onChange={changeMaxValue}\r\n                                   className={props.error ? s.inputActive : s.input}/>\r\n                        </div>\r\n\r\n                        <div className={s.inputText}>\r\n                            <span>start value:</span>\r\n                            <input type={\"number\"} value={startValue} onChange={ChangeValue}\r\n                                   className={props.error ? s.inputActive : s.input}/>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div className={s.buttonDiv}>\r\n                        <Button variant={'contained'} className={s.button} onClick={setResult}\r\n                                disabled={disableButton()}>\r\n                            <SettingsIcon/>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Counter2;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Counter from \"./counter\";\r\nimport Counter2 from \"./Counter2\";\r\n\r\n\r\nfunction App() {\r\n    const [counter, setCounter] = useState<number>(0)\r\n    const [maxValue, setMaxValue] = useState<number>(0)\r\n    const [startValue, setStartValue] = useState<number>(0)\r\n    const [error, setError] = useState<boolean>(false)\r\n    const addTask = () => {\r\n        setCounter(counter + 1)\r\n    }\r\n    const removeTask = () => {\r\n        setCounter(startValue)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n                    <Counter2\r\n                        counter={counter}\r\n                        set={setCounter}\r\n                        setRemoveNumber={setStartValue}\r\n                        maxValue={setMaxValue}\r\n                        errorNumber={setError}\r\n                        error={error}\r\n                        startValue={setStartValue}\r\n                    />\r\n\r\n                    <Counter\r\n                        addTask={addTask}\r\n                        counter={counter}\r\n                        removeTask={removeTask}\r\n                        error={error}\r\n                        maxValue={maxValue}\r\n                        startValue={startValue}\r\n                    />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}